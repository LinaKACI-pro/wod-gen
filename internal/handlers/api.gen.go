// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GenerateWodParamsLevel.
const (
	GenerateWodParamsLevelAdvanced     GenerateWodParamsLevel = "advanced"
	GenerateWodParamsLevelBeginner     GenerateWodParamsLevel = "beginner"
	GenerateWodParamsLevelIntermediate GenerateWodParamsLevel = "intermediate"
)

// Defines values for WodLevel.
const (
	WodLevelAdvanced     WodLevel = "advanced"
	WodLevelBeginner     WodLevel = "beginner"
	WodLevelIntermediate WodLevel = "intermediate"
)

// Block A workout block (movement + params)
type Block struct {
	Name   *string                 `json:"name,omitempty"`
	Params *map[string]interface{} `json:"params,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GenerateWodParams defines model for GenerateWodParams.
type GenerateWodParams struct {
	DurationMin int                    `json:"duration_min" validate:"required,min=15,max=120"`
	Equipment   *[]string              `json:"equipment,omitempty"`
	Level       GenerateWodParamsLevel `json:"level" validate:"required,oneof=beginner intermediate advanced"`
	Seed        *string                `json:"seed,omitempty"`
}

// GenerateWodParamsLevel defines model for GenerateWodParams.Level.
type GenerateWodParamsLevel string

// Wod defines model for Wod.
type Wod struct {
	Blocks           []Block            `json:"blocks"`
	CreatedAt        time.Time          `json:"created_at"`
	DurationMin      int                `json:"duration_min"`
	Equipment        *[]string          `json:"equipment,omitempty"`
	GeneratorVersion string             `json:"generator_version"`
	Id               openapi_types.UUID `json:"id"`
	Level            WodLevel           `json:"level"`
	Seed             string             `json:"seed"`
}

// WodLevel defines model for Wod.Level.
type WodLevel string

// GenerateWodRequest defines model for GenerateWodRequest.
type GenerateWodRequest = GenerateWodParams

// ListWodsParams defines parameters for ListWods.
type ListWodsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GenerateWodJSONRequestBody defines body for GenerateWod for application/json ContentType.
type GenerateWodJSONRequestBody = GenerateWodParams

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /wod/generate)
	GenerateWod(c *gin.Context)
	// List stored WODs
	// (GET /wod/list)
	ListWods(c *gin.Context, params ListWodsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateWod operation middleware
func (siw *ServerInterfaceWrapper) GenerateWod(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateWod(c)
}

// ListWods operation middleware
func (siw *ServerInterfaceWrapper) ListWods(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWodsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListWods(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/wod/generate", wrapper.GenerateWod)
	router.GET(options.BaseURL+"/wod/list", wrapper.ListWods)
}

type GenerateWodRequestObject struct {
	Body *GenerateWodJSONRequestBody
}

type GenerateWodResponseObject interface {
	VisitGenerateWodResponse(w http.ResponseWriter) error
}

type GenerateWod200JSONResponse Wod

func (response GenerateWod200JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod400JSONResponse ErrorResponse

func (response GenerateWod400JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod401JSONResponse ErrorResponse

func (response GenerateWod401JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod403JSONResponse ErrorResponse

func (response GenerateWod403JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod429JSONResponse ErrorResponse

func (response GenerateWod429JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod500JSONResponse ErrorResponse

func (response GenerateWod500JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWodsRequestObject struct {
	Params ListWodsParams
}

type ListWodsResponseObject interface {
	VisitListWodsResponse(w http.ResponseWriter) error
}

type ListWods200JSONResponse struct {
	Wods *[]Wod `json:"wods,omitempty"`
}

func (response ListWods200JSONResponse) VisitListWodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWods500JSONResponse ErrorResponse

func (response ListWods500JSONResponse) VisitListWodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /wod/generate)
	GenerateWod(ctx context.Context, request GenerateWodRequestObject) (GenerateWodResponseObject, error)
	// List stored WODs
	// (GET /wod/list)
	ListWods(ctx context.Context, request ListWodsRequestObject) (ListWodsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateWod operation middleware
func (sh *strictHandler) GenerateWod(ctx *gin.Context) {
	var request GenerateWodRequestObject

	var body GenerateWodJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateWod(ctx, request.(GenerateWodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateWod")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GenerateWodResponseObject); ok {
		if err := validResponse.VisitGenerateWodResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWods operation middleware
func (sh *strictHandler) ListWods(ctx *gin.Context, params ListWodsParams) {
	var request ListWodsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListWods(ctx, request.(ListWodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWods")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListWodsResponseObject); ok {
		if err := validResponse.VisitListWodsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW72/bNhD9V4jbPmwYHctuM6AC+qHFtizAgAXBhgALgoAWzw5TkaeSlH8s0P8+HCU7",
	"Uqx0RVdknyxT1Lv37t7x+AAF2YocuhggfwCPH2sM8T1pg2nhDB16FfGK9GX7jlcLchFdelRVVZpCRUNu",
	"eh/I8Voo7tAqfvrW4xJy+Gb6GGbavg3THvSF8soGaJpGJgrGo4Y8+hp5pfuA8d6XVHzgB42h8KbisJDD",
	"O7Eh/4HqKBa8QXxnaY0WXRQ/iCphfw8SKk8V+tgpc8oi/+JW2apEyOGSNiAh7ir+E6I3bgWNhBYgadXa",
	"cERVXvSgmKZ8hHkAixF9gHyWZVlzAKTFPRYRmuMVCT97T/4SQ0UuJIgh1YL0kOrrLDugGBdxhZ5hLIag",
	"Vk9UGbdWpdGiK+2xwkHOr9tgj1g3I3SPK/dscpaqDPg09br2yTC31rihrlMJVm2NrS3ks3kmwRrX/Ts9",
	"UixhOyFVmQlTXqGb4DZ6NYlqlaIk2SryF3t90hr3dnYqrdq+nc2zpJ1fVbZz84HJNXjapBihRA0SFrWv",
	"EMXCk9LivrYVZ8ZEbMUfmaZbUN6rHf8vcY1liuBYzTUscGWcSxFYj7eoDZOVoPRauQI1B+iXcbBpGPAL",
	"MkEOafl2z0L04cWBQeo+ZF/0HaXR0oSXJ7P5q3/1U6tcDos+5qor0sfWT/2cng65/tSZ0p4PI/kvPKqI",
	"+lYNywzzbH46yd5Msh//mM3zLMuz7C+QsCRveStw2ibRWBw7GZ76+LgjB+b6fLes2gYjf7tGHwwNuwTW",
	"szE2JqXvwLyujR7b9oVOPMLZ++LT1U8cesmX436Q+0J3uGMpOPYMBzNuSSMD4eJcRBIdCArl+ACM3uAa",
	"xa87T9tJiLsS93ODA0cTU3bTa3H1+0/ibM9BvLs4BwmHYkB2MjvJOAtUoVOVgRxenWQnGU8ZFe9Slacb",
	"0tM9g+RsaqfnkOrZgaNwuElxFyqgFuREQS5Er4xLBLkvUsrOde87bhvZG9y753pkMNunI4M9la6dQUnA",
	"PMu+2rBnlqleQ/Gsdp8iLUJdFBjCsi7L1AavvyKB4YgdoXI+nJNiwalMJGYvR+JPp+p4R978zacvB3/1",
	"csF/Ib8wWqNLkedvXi7yJfu/NNZEgdsCUbfqT1+2/hG9U6UI6NfoBfIHvLGRbSuXpm3fFaafYTf+ZkK8",
	"Ih2guy92V8DrB+DRAB9r9DuQ3aUTklSQPeoal6ouI18a+5ee41teI8chabkM+AxmH3Lk4tjc/MfGH47s",
	"Dafhcwd2OheeDsBm9KR/euXnegha8okZ/j+37G0iIdTWKr/rzCBCJI+6Y9depNhXrSlqX0IOU1WZ6XoG",
	"zU3zTwAAAP//c9Ebn4kNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
