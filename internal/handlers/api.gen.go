// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GenerateWodParamsLevel.
const (
	GenerateWodParamsLevelAdvanced     GenerateWodParamsLevel = "advanced"
	GenerateWodParamsLevelBeginner     GenerateWodParamsLevel = "beginner"
	GenerateWodParamsLevelIntermediate GenerateWodParamsLevel = "intermediate"
)

// Defines values for WodLevel.
const (
	WodLevelAdvanced     WodLevel = "advanced"
	WodLevelBeginner     WodLevel = "beginner"
	WodLevelIntermediate WodLevel = "intermediate"
)

// Block A workout block (movement + params)
type Block struct {
	Name   *string                 `json:"name,omitempty"`
	Params *map[string]interface{} `json:"params,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code      int     `json:"code"`
	Message   string  `json:"message"`
	RequestId *string `json:"request_id"`
}

// GenerateWodParams defines model for GenerateWodParams.
type GenerateWodParams struct {
	DurationMin int                    `json:"duration_min" validate:"required,min=15,max=120"`
	Equipment   *[]string              `json:"equipment,omitempty"`
	Level       GenerateWodParamsLevel `json:"level" validate:"required,oneof=beginner intermediate advanced"`
	Seed        *string                `json:"seed,omitempty"`
}

// GenerateWodParamsLevel defines model for GenerateWodParams.Level.
type GenerateWodParamsLevel string

// Wod defines model for Wod.
type Wod struct {
	Blocks           []Block            `json:"blocks"`
	CreatedAt        time.Time          `json:"created_at"`
	DurationMin      int                `json:"duration_min"`
	Equipment        *[]string          `json:"equipment,omitempty"`
	GeneratorVersion string             `json:"generator_version"`
	Id               openapi_types.UUID `json:"id"`
	Level            WodLevel           `json:"level"`
	Seed             string             `json:"seed"`
}

// WodLevel defines model for Wod.Level.
type WodLevel string

// GenerateWodRequest defines model for GenerateWodRequest.
type GenerateWodRequest = GenerateWodParams

// ListWodsParams defines parameters for ListWods.
type ListWodsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GenerateWodJSONRequestBody defines body for GenerateWod for application/json ContentType.
type GenerateWodJSONRequestBody = GenerateWodParams

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /wod/generate)
	GenerateWod(c *gin.Context)
	// List stored WODs
	// (GET /wod/list)
	ListWods(c *gin.Context, params ListWodsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GenerateWod operation middleware
func (siw *ServerInterfaceWrapper) GenerateWod(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateWod(c)
}

// ListWods operation middleware
func (siw *ServerInterfaceWrapper) ListWods(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWodsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListWods(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/wod/generate", wrapper.GenerateWod)
	router.GET(options.BaseURL+"/wod/list", wrapper.ListWods)
}

type GenerateWodRequestObject struct {
	Body *GenerateWodJSONRequestBody
}

type GenerateWodResponseObject interface {
	VisitGenerateWodResponse(w http.ResponseWriter) error
}

type GenerateWod200JSONResponse Wod

func (response GenerateWod200JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod400JSONResponse ErrorResponse

func (response GenerateWod400JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod401JSONResponse ErrorResponse

func (response GenerateWod401JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod403JSONResponse ErrorResponse

func (response GenerateWod403JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod429JSONResponse ErrorResponse

func (response GenerateWod429JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GenerateWod500JSONResponse ErrorResponse

func (response GenerateWod500JSONResponse) VisitGenerateWodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWodsRequestObject struct {
	Params ListWodsParams
}

type ListWodsResponseObject interface {
	VisitListWodsResponse(w http.ResponseWriter) error
}

type ListWods200JSONResponse struct {
	Wods *[]Wod `json:"wods,omitempty"`
}

func (response ListWods200JSONResponse) VisitListWodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWods500JSONResponse ErrorResponse

func (response ListWods500JSONResponse) VisitListWodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /wod/generate)
	GenerateWod(ctx context.Context, request GenerateWodRequestObject) (GenerateWodResponseObject, error)
	// List stored WODs
	// (GET /wod/list)
	ListWods(ctx context.Context, request ListWodsRequestObject) (ListWodsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateWod operation middleware
func (sh *strictHandler) GenerateWod(ctx *gin.Context) {
	var request GenerateWodRequestObject

	var body GenerateWodJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateWod(ctx, request.(GenerateWodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateWod")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GenerateWodResponseObject); ok {
		if err := validResponse.VisitGenerateWodResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWods operation middleware
func (sh *strictHandler) ListWods(ctx *gin.Context, params ListWodsParams) {
	var request ListWodsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListWods(ctx, request.(ListWodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWods")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListWodsResponseObject); ok {
		if err := validResponse.VisitListWodsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXb2/bthP+KsT9fi82jLIlpy5QAXnRYlsWYMCCYEOABUFAiyeHqUiqJOU/C/Tdh6Nk",
	"x7KVruiK7JUlUnzuubvneOcnKKyurUETPORP4PBTgz58sFJhXLhAg04EvLHyutuj1cKagCY+irquVCGC",
	"smb66K2hNV88oBb09H+HJeTwv+mzmWm366cH0FfCCe2hbVseKSiHEvLgGqSV/gDhfahs8ZEeJPrCqZrM",
	"Qg7v2dq6j7YJbEEfsO+0XaFGE9gPrI7Y3wOH2tkaXeg9M0Ij/eJG6LpCyOHaroFD2Nb04oNTZgkthw4g",
	"+iqlIouiujqAIpr8GeYJNAZ0HvIsTdN2D2gXj1gEaE9XOPzknHXX6GtrfIQYUi2sHFJ9k6Z7FGUCLtER",
	"jEbvxfLIK2VWolKS9akd87DfuldyeHSRlW/FTJ4lk8kEOJimqsSCdjqXj3AGubvtSD9zuhtx+1QBLwa5",
	"FJXH4xTKxkXh3WtlhvGZc9Bio3SjIc9mKQetTP82P4kch01iRa0SorxEk+AmOJEEsYxWYvhEoBM7/7hW",
	"5jybcy0259ksjb7TVq37qtgzuQVn19GGr1ACh0XjakS2cFZI9tjomiKjAnbOn6SmXxDOiS29V7jCKlow",
	"5M0tLHCpjIkWyB+nUSoiy0HIlTAFSjJwKIfBR0ODXxEJa9CW5zsW7BCe7RnEKkY8kpdEbRNaTrLZGfyT",
	"njrP+TDpY6q6sfK0hOK9EJ/2sf7c3dTdMyPxLxyKgPJeDNMMs3Q2T9J3Sfr292yWp2mepn8Ch9I6TZ8C",
	"hS0JSuNY/R3r+LSyB+L6crUsuwKz7n6Fzis7rBJYZWNsultgz7xplBz77CuVeIKz08Xnsx85HASfj+uB",
	"7xLd446F4FQzZEyZ0o40lqtLFizrQZAJQxdpcApXyH7ZOrtJfNhWuOs/ZDioEKMbt9nNbz+yix0H9v7q",
	"EjjskwHpJJukFAVboxG1ghzOJukkpW4lwkPM8nRt5XTHICrbdl14SPViz5EZXEe7C+FRMmtYYY0PTigT",
	"CVJdxJBdyoNzVDb8YADYvlQjgxlhOjIgxNR1vSw6MEvTbzY0EMuYr6Hz5O0uRJL5pijQ+7KpqlgGb74h",
	"gWGrHqFyOey3bEGhjCSy1yPxhxFNeLBO/UW3Lxk/ez3jP1u3UFKiiZZn717P8jXpv1JaBYabAlF23s9f",
	"N/8BnREV8+hW6BjSAfqw5V0pV6or3yXGn2E1/qp8uLHSQz939qPk7RNQa4BPDbotjWJxeIXoKvAD6hJL",
	"0VSBhs/Doed0Wmz5OKQtS48vYB5Cjgyg7d2/LPxhy15TGL60Ycd74bgBtqM3/fFfB8oHsyXdmP6/U8tO",
	"Jhx8o7Vw214MzAfrUPbsukGKdNWJonEV5DAVtZquMmjv2r8DAAD//6EO8xbRDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
